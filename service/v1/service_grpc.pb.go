// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: api/service/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// K8SServiceServiceClient is the client API for K8SServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SServiceServiceClient interface {
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error)
	FindService(ctx context.Context, in *FindServiceRequest, opts ...grpc.CallOption) (*FindServiceResponse, error)
	CreateServiceConfirm(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	DeleteServiceConfirm(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error)
	CreateServiceCancel(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	DeleteServiceCancel(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error)
}

type k8SServiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SServiceServiceClient(cc grpc.ClientConnInterface) K8SServiceServiceClient {
	return &k8SServiceServiceClient{cc}
}

func (c *k8SServiceServiceClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, "/service.K8sServiceService/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceServiceClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error) {
	out := new(DeleteServiceResponse)
	err := c.cc.Invoke(ctx, "/service.K8sServiceService/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceServiceClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error) {
	out := new(UpdateServiceResponse)
	err := c.cc.Invoke(ctx, "/service.K8sServiceService/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceServiceClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, "/service.K8sServiceService/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceServiceClient) ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error) {
	out := new(ListServiceResponse)
	err := c.cc.Invoke(ctx, "/service.K8sServiceService/ListService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceServiceClient) FindService(ctx context.Context, in *FindServiceRequest, opts ...grpc.CallOption) (*FindServiceResponse, error) {
	out := new(FindServiceResponse)
	err := c.cc.Invoke(ctx, "/service.K8sServiceService/FindService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceServiceClient) CreateServiceConfirm(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, "/service.K8sServiceService/CreateServiceConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceServiceClient) DeleteServiceConfirm(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error) {
	out := new(DeleteServiceResponse)
	err := c.cc.Invoke(ctx, "/service.K8sServiceService/DeleteServiceConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceServiceClient) CreateServiceCancel(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, "/service.K8sServiceService/CreateServiceCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceServiceClient) DeleteServiceCancel(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error) {
	out := new(DeleteServiceResponse)
	err := c.cc.Invoke(ctx, "/service.K8sServiceService/DeleteServiceCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SServiceServiceServer is the server API for K8SServiceService service.
// All implementations must embed UnimplementedK8SServiceServiceServer
// for forward compatibility
type K8SServiceServiceServer interface {
	CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error)
	UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error)
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	ListService(context.Context, *ListServiceRequest) (*ListServiceResponse, error)
	FindService(context.Context, *FindServiceRequest) (*FindServiceResponse, error)
	CreateServiceConfirm(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	DeleteServiceConfirm(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error)
	CreateServiceCancel(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	DeleteServiceCancel(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error)
	mustEmbedUnimplementedK8SServiceServiceServer()
}

// UnimplementedK8SServiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedK8SServiceServiceServer struct {
}

func (UnimplementedK8SServiceServiceServer) CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedK8SServiceServiceServer) DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedK8SServiceServiceServer) UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedK8SServiceServiceServer) GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedK8SServiceServiceServer) ListService(context.Context, *ListServiceRequest) (*ListServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (UnimplementedK8SServiceServiceServer) FindService(context.Context, *FindServiceRequest) (*FindServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindService not implemented")
}
func (UnimplementedK8SServiceServiceServer) CreateServiceConfirm(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceConfirm not implemented")
}
func (UnimplementedK8SServiceServiceServer) DeleteServiceConfirm(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceConfirm not implemented")
}
func (UnimplementedK8SServiceServiceServer) CreateServiceCancel(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceCancel not implemented")
}
func (UnimplementedK8SServiceServiceServer) DeleteServiceCancel(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceCancel not implemented")
}
func (UnimplementedK8SServiceServiceServer) mustEmbedUnimplementedK8SServiceServiceServer() {}

// UnsafeK8SServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SServiceServiceServer will
// result in compilation errors.
type UnsafeK8SServiceServiceServer interface {
	mustEmbedUnimplementedK8SServiceServiceServer()
}

func RegisterK8SServiceServiceServer(s grpc.ServiceRegistrar, srv K8SServiceServiceServer) {
	s.RegisterService(&K8SServiceService_ServiceDesc, srv)
}

func _K8SServiceService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.K8sServiceService/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServiceServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SServiceService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.K8sServiceService/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServiceServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SServiceService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.K8sServiceService/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServiceServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SServiceService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.K8sServiceService/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServiceServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SServiceService_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServiceServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.K8sServiceService/ListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServiceServer).ListService(ctx, req.(*ListServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SServiceService_FindService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServiceServer).FindService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.K8sServiceService/FindService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServiceServer).FindService(ctx, req.(*FindServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SServiceService_CreateServiceConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServiceServer).CreateServiceConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.K8sServiceService/CreateServiceConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServiceServer).CreateServiceConfirm(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SServiceService_DeleteServiceConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServiceServer).DeleteServiceConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.K8sServiceService/DeleteServiceConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServiceServer).DeleteServiceConfirm(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SServiceService_CreateServiceCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServiceServer).CreateServiceCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.K8sServiceService/CreateServiceCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServiceServer).CreateServiceCancel(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SServiceService_DeleteServiceCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServiceServer).DeleteServiceCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.K8sServiceService/DeleteServiceCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServiceServer).DeleteServiceCancel(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SServiceService_ServiceDesc is the grpc.ServiceDesc for K8SServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.K8sServiceService",
	HandlerType: (*K8SServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _K8SServiceService_CreateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _K8SServiceService_DeleteService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _K8SServiceService_UpdateService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _K8SServiceService_GetService_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _K8SServiceService_ListService_Handler,
		},
		{
			MethodName: "FindService",
			Handler:    _K8SServiceService_FindService_Handler,
		},
		{
			MethodName: "CreateServiceConfirm",
			Handler:    _K8SServiceService_CreateServiceConfirm_Handler,
		},
		{
			MethodName: "DeleteServiceConfirm",
			Handler:    _K8SServiceService_DeleteServiceConfirm_Handler,
		},
		{
			MethodName: "CreateServiceCancel",
			Handler:    _K8SServiceService_CreateServiceCancel_Handler,
		},
		{
			MethodName: "DeleteServiceCancel",
			Handler:    _K8SServiceService_DeleteServiceCancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service/v1/service.proto",
}
