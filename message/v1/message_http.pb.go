// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type MessageHTTPServer interface {
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageReply, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessReply, error)
	ListMessage(context.Context, *ListMessageRequest) (*ListMessageReply, error)
}

func RegisterMessageHTTPServer(s *http.Server, srv MessageHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/message", _Message_CreateMessage0_HTTP_Handler(srv))
	r.POST("/api/v1/message/list", _Message_ListMessage0_HTTP_Handler(srv))
	r.DELETE("/api/v1/message", _Message_DeleteMessage0_HTTP_Handler(srv))
}

func _Message_CreateMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.message.v1.Message/CreateMessage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMessage(ctx, req.(*CreateMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Message_ListMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.message.v1.Message/ListMessage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMessage(ctx, req.(*ListMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Message_DeleteMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.message.v1.Message/DeleteMessage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMessage(ctx, req.(*DeleteMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMessReply)
		return ctx.Result(200, reply)
	}
}

type MessageHTTPClient interface {
	CreateMessage(ctx context.Context, req *CreateMessageRequest, opts ...http.CallOption) (rsp *CreateMessageReply, err error)
	DeleteMessage(ctx context.Context, req *DeleteMessageRequest, opts ...http.CallOption) (rsp *DeleteMessReply, err error)
	ListMessage(ctx context.Context, req *ListMessageRequest, opts ...http.CallOption) (rsp *ListMessageReply, err error)
}

type MessageHTTPClientImpl struct {
	cc *http.Client
}

func NewMessageHTTPClient(client *http.Client) MessageHTTPClient {
	return &MessageHTTPClientImpl{client}
}

func (c *MessageHTTPClientImpl) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...http.CallOption) (*CreateMessageReply, error) {
	var out CreateMessageReply
	pattern := "/api/v1/message"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.message.v1.Message/CreateMessage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...http.CallOption) (*DeleteMessReply, error) {
	var out DeleteMessReply
	pattern := "/api/v1/message"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.message.v1.Message/DeleteMessage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) ListMessage(ctx context.Context, in *ListMessageRequest, opts ...http.CallOption) (*ListMessageReply, error) {
	var out ListMessageReply
	pattern := "/api/v1/message/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.message.v1.Message/ListMessage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
