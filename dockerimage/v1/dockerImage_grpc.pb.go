// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: api/dockerimage/v1/dockerImage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DockerImageClient is the client API for DockerImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DockerImageClient interface {
	GetRegistry(ctx context.Context, in *GetRegistryRequest, opts ...grpc.CallOption) (*GetRegistryResponse, error)
	LoadDockerImage(ctx context.Context, in *LoadDockerImageRequest, opts ...grpc.CallOption) (*LoadDockerImageReply, error)
	PushDockerImage(ctx context.Context, in *PushDockerImageRequest, opts ...grpc.CallOption) (*PushDockerImageReply, error)
	DeleteRemoteDockerImage(ctx context.Context, in *DeleteRemoteDockerImageRequest, opts ...grpc.CallOption) (*DeleteRemoteDockerImageReply, error)
}

type dockerImageClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerImageClient(cc grpc.ClientConnInterface) DockerImageClient {
	return &dockerImageClient{cc}
}

func (c *dockerImageClient) GetRegistry(ctx context.Context, in *GetRegistryRequest, opts ...grpc.CallOption) (*GetRegistryResponse, error) {
	out := new(GetRegistryResponse)
	err := c.cc.Invoke(ctx, "/api.dockerimage.v1.DockerImage/GetRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerImageClient) LoadDockerImage(ctx context.Context, in *LoadDockerImageRequest, opts ...grpc.CallOption) (*LoadDockerImageReply, error) {
	out := new(LoadDockerImageReply)
	err := c.cc.Invoke(ctx, "/api.dockerimage.v1.DockerImage/LoadDockerImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerImageClient) PushDockerImage(ctx context.Context, in *PushDockerImageRequest, opts ...grpc.CallOption) (*PushDockerImageReply, error) {
	out := new(PushDockerImageReply)
	err := c.cc.Invoke(ctx, "/api.dockerimage.v1.DockerImage/PushDockerImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerImageClient) DeleteRemoteDockerImage(ctx context.Context, in *DeleteRemoteDockerImageRequest, opts ...grpc.CallOption) (*DeleteRemoteDockerImageReply, error) {
	out := new(DeleteRemoteDockerImageReply)
	err := c.cc.Invoke(ctx, "/api.dockerimage.v1.DockerImage/DeleteRemoteDockerImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerImageServer is the server API for DockerImage service.
// All implementations must embed UnimplementedDockerImageServer
// for forward compatibility
type DockerImageServer interface {
	GetRegistry(context.Context, *GetRegistryRequest) (*GetRegistryResponse, error)
	LoadDockerImage(context.Context, *LoadDockerImageRequest) (*LoadDockerImageReply, error)
	PushDockerImage(context.Context, *PushDockerImageRequest) (*PushDockerImageReply, error)
	DeleteRemoteDockerImage(context.Context, *DeleteRemoteDockerImageRequest) (*DeleteRemoteDockerImageReply, error)
	mustEmbedUnimplementedDockerImageServer()
}

// UnimplementedDockerImageServer must be embedded to have forward compatible implementations.
type UnimplementedDockerImageServer struct {
}

func (UnimplementedDockerImageServer) GetRegistry(context.Context, *GetRegistryRequest) (*GetRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistry not implemented")
}
func (UnimplementedDockerImageServer) LoadDockerImage(context.Context, *LoadDockerImageRequest) (*LoadDockerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadDockerImage not implemented")
}
func (UnimplementedDockerImageServer) PushDockerImage(context.Context, *PushDockerImageRequest) (*PushDockerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushDockerImage not implemented")
}
func (UnimplementedDockerImageServer) DeleteRemoteDockerImage(context.Context, *DeleteRemoteDockerImageRequest) (*DeleteRemoteDockerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemoteDockerImage not implemented")
}
func (UnimplementedDockerImageServer) mustEmbedUnimplementedDockerImageServer() {}

// UnsafeDockerImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerImageServer will
// result in compilation errors.
type UnsafeDockerImageServer interface {
	mustEmbedUnimplementedDockerImageServer()
}

func RegisterDockerImageServer(s grpc.ServiceRegistrar, srv DockerImageServer) {
	s.RegisterService(&DockerImage_ServiceDesc, srv)
}

func _DockerImage_GetRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerImageServer).GetRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dockerimage.v1.DockerImage/GetRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerImageServer).GetRegistry(ctx, req.(*GetRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerImage_LoadDockerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadDockerImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerImageServer).LoadDockerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dockerimage.v1.DockerImage/LoadDockerImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerImageServer).LoadDockerImage(ctx, req.(*LoadDockerImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerImage_PushDockerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDockerImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerImageServer).PushDockerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dockerimage.v1.DockerImage/PushDockerImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerImageServer).PushDockerImage(ctx, req.(*PushDockerImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerImage_DeleteRemoteDockerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRemoteDockerImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerImageServer).DeleteRemoteDockerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dockerimage.v1.DockerImage/DeleteRemoteDockerImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerImageServer).DeleteRemoteDockerImage(ctx, req.(*DeleteRemoteDockerImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DockerImage_ServiceDesc is the grpc.ServiceDesc for DockerImage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DockerImage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dockerimage.v1.DockerImage",
	HandlerType: (*DockerImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegistry",
			Handler:    _DockerImage_GetRegistry_Handler,
		},
		{
			MethodName: "LoadDockerImage",
			Handler:    _DockerImage_LoadDockerImage_Handler,
		},
		{
			MethodName: "PushDockerImage",
			Handler:    _DockerImage_PushDockerImage_Handler,
		},
		{
			MethodName: "DeleteRemoteDockerImage",
			Handler:    _DockerImage_DeleteRemoteDockerImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dockerimage/v1/dockerImage.proto",
}
