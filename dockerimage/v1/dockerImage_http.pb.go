// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type DockerImageHTTPServer interface {
	DeleteRemoteDockerImage(context.Context, *DeleteRemoteDockerImageRequest) (*DeleteRemoteDockerImageReply, error)
	LoadDockerImage(context.Context, *LoadDockerImageRequest) (*LoadDockerImageReply, error)
	PushDockerImage(context.Context, *PushDockerImageRequest) (*PushDockerImageReply, error)
}

func RegisterDockerImageHTTPServer(s *http.Server, srv DockerImageHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/docker/load", _DockerImage_LoadDockerImage0_HTTP_Handler(srv))
	r.POST("/api/v1/docker/upload", _DockerImage_PushDockerImage0_HTTP_Handler(srv))
	r.POST("/api/v1/docker/upload", _DockerImage_DeleteRemoteDockerImage0_HTTP_Handler(srv))
}

func _DockerImage_LoadDockerImage0_HTTP_Handler(srv DockerImageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoadDockerImageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.dockerimage.v1.DockerImage/LoadDockerImage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoadDockerImage(ctx, req.(*LoadDockerImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoadDockerImageReply)
		return ctx.Result(200, reply)
	}
}

func _DockerImage_PushDockerImage0_HTTP_Handler(srv DockerImageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushDockerImageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.dockerimage.v1.DockerImage/PushDockerImage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PushDockerImage(ctx, req.(*PushDockerImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PushDockerImageReply)
		return ctx.Result(200, reply)
	}
}

func _DockerImage_DeleteRemoteDockerImage0_HTTP_Handler(srv DockerImageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRemoteDockerImageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.dockerimage.v1.DockerImage/DeleteRemoteDockerImage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRemoteDockerImage(ctx, req.(*DeleteRemoteDockerImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRemoteDockerImageReply)
		return ctx.Result(200, reply)
	}
}

type DockerImageHTTPClient interface {
	DeleteRemoteDockerImage(ctx context.Context, req *DeleteRemoteDockerImageRequest, opts ...http.CallOption) (rsp *DeleteRemoteDockerImageReply, err error)
	LoadDockerImage(ctx context.Context, req *LoadDockerImageRequest, opts ...http.CallOption) (rsp *LoadDockerImageReply, err error)
	PushDockerImage(ctx context.Context, req *PushDockerImageRequest, opts ...http.CallOption) (rsp *PushDockerImageReply, err error)
}

type DockerImageHTTPClientImpl struct {
	cc *http.Client
}

func NewDockerImageHTTPClient(client *http.Client) DockerImageHTTPClient {
	return &DockerImageHTTPClientImpl{client}
}

func (c *DockerImageHTTPClientImpl) DeleteRemoteDockerImage(ctx context.Context, in *DeleteRemoteDockerImageRequest, opts ...http.CallOption) (*DeleteRemoteDockerImageReply, error) {
	var out DeleteRemoteDockerImageReply
	pattern := "/api/v1/docker/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.dockerimage.v1.DockerImage/DeleteRemoteDockerImage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DockerImageHTTPClientImpl) LoadDockerImage(ctx context.Context, in *LoadDockerImageRequest, opts ...http.CallOption) (*LoadDockerImageReply, error) {
	var out LoadDockerImageReply
	pattern := "/api/v1/docker/load"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.dockerimage.v1.DockerImage/LoadDockerImage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DockerImageHTTPClientImpl) PushDockerImage(ctx context.Context, in *PushDockerImageRequest, opts ...http.CallOption) (*PushDockerImageReply, error) {
	var out PushDockerImageReply
	pattern := "/api/v1/docker/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.dockerimage.v1.DockerImage/PushDockerImage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
