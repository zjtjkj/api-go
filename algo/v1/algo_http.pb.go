// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.2

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AlgoHTTPServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	SetAuth(context.Context, *SetAuthRequest) (*SetAuthResponse, error)
}

func RegisterAlgoHTTPServer(s *http.Server, srv AlgoHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/ai/auth", _Algo_SetAuth0_HTTP_Handler(srv))
	r.GET("/api/v1/ai/info", _Algo_GetInfo0_HTTP_Handler(srv))
	r.POST("/api/v1/ai/task", _Algo_CreateTask0_HTTP_Handler(srv))
}

func _Algo_SetAuth0_HTTP_Handler(srv AlgoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetAuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.algo.v1.Algo/SetAuth")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetAuth(ctx, req.(*SetAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetAuthResponse)
		return ctx.Result(200, reply)
	}
}

func _Algo_GetInfo0_HTTP_Handler(srv AlgoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.algo.v1.Algo/GetInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInfo(ctx, req.(*GetInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _Algo_CreateTask0_HTTP_Handler(srv AlgoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.algo.v1.Algo/CreateTask")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTask(ctx, req.(*CreateTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTaskResponse)
		return ctx.Result(200, reply)
	}
}

type AlgoHTTPClient interface {
	CreateTask(ctx context.Context, req *CreateTaskRequest, opts ...http.CallOption) (rsp *CreateTaskResponse, err error)
	GetInfo(ctx context.Context, req *GetInfoRequest, opts ...http.CallOption) (rsp *GetInfoResponse, err error)
	SetAuth(ctx context.Context, req *SetAuthRequest, opts ...http.CallOption) (rsp *SetAuthResponse, err error)
}

type AlgoHTTPClientImpl struct {
	cc *http.Client
}

func NewAlgoHTTPClient(client *http.Client) AlgoHTTPClient {
	return &AlgoHTTPClientImpl{client}
}

func (c *AlgoHTTPClientImpl) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...http.CallOption) (*CreateTaskResponse, error) {
	var out CreateTaskResponse
	pattern := "/api/v1/ai/task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.algo.v1.Algo/CreateTask"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlgoHTTPClientImpl) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...http.CallOption) (*GetInfoResponse, error) {
	var out GetInfoResponse
	pattern := "/api/v1/ai/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.algo.v1.Algo/GetInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlgoHTTPClientImpl) SetAuth(ctx context.Context, in *SetAuthRequest, opts ...http.CallOption) (*SetAuthResponse, error) {
	var out SetAuthResponse
	pattern := "/api/v1/ai/auth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.algo.v1.Algo/SetAuth"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
