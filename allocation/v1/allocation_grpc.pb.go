// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: api/allocation/v1/allocation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AllocationServiceClient is the client API for AllocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllocationServiceClient interface {
	CreateAllocation(ctx context.Context, in *CreateAllocationRequest, opts ...grpc.CallOption) (*CreateAllocationResponse, error)
	DeleteAllocation(ctx context.Context, in *DeleteAllocationRequest, opts ...grpc.CallOption) (*DeleteAllocationResponse, error)
	UpdateAllocation(ctx context.Context, in *UpdateAllocationRequest, opts ...grpc.CallOption) (*UpdateAllocationResponse, error)
	FindAllocation(ctx context.Context, in *FindAllocationRequest, opts ...grpc.CallOption) (*FindAllocationResponse, error)
	GetAllocation(ctx context.Context, in *GetAllocationRequest, opts ...grpc.CallOption) (*GetAllocationResponse, error)
	ListAllocation(ctx context.Context, in *ListAllocationRequest, opts ...grpc.CallOption) (*ListAllocationResponse, error)
	RequestSpace(ctx context.Context, in *RequestSpaceRequest, opts ...grpc.CallOption) (*RequestSpaceResponse, error)
	ReleaseSpace(ctx context.Context, in *ReleaseSpaceRequest, opts ...grpc.CallOption) (*ReleaseSpaceResponse, error)
}

type allocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAllocationServiceClient(cc grpc.ClientConnInterface) AllocationServiceClient {
	return &allocationServiceClient{cc}
}

func (c *allocationServiceClient) CreateAllocation(ctx context.Context, in *CreateAllocationRequest, opts ...grpc.CallOption) (*CreateAllocationResponse, error) {
	out := new(CreateAllocationResponse)
	err := c.cc.Invoke(ctx, "/v1.AllocationService/CreateAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationServiceClient) DeleteAllocation(ctx context.Context, in *DeleteAllocationRequest, opts ...grpc.CallOption) (*DeleteAllocationResponse, error) {
	out := new(DeleteAllocationResponse)
	err := c.cc.Invoke(ctx, "/v1.AllocationService/DeleteAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationServiceClient) UpdateAllocation(ctx context.Context, in *UpdateAllocationRequest, opts ...grpc.CallOption) (*UpdateAllocationResponse, error) {
	out := new(UpdateAllocationResponse)
	err := c.cc.Invoke(ctx, "/v1.AllocationService/UpdateAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationServiceClient) FindAllocation(ctx context.Context, in *FindAllocationRequest, opts ...grpc.CallOption) (*FindAllocationResponse, error) {
	out := new(FindAllocationResponse)
	err := c.cc.Invoke(ctx, "/v1.AllocationService/FindAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationServiceClient) GetAllocation(ctx context.Context, in *GetAllocationRequest, opts ...grpc.CallOption) (*GetAllocationResponse, error) {
	out := new(GetAllocationResponse)
	err := c.cc.Invoke(ctx, "/v1.AllocationService/GetAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationServiceClient) ListAllocation(ctx context.Context, in *ListAllocationRequest, opts ...grpc.CallOption) (*ListAllocationResponse, error) {
	out := new(ListAllocationResponse)
	err := c.cc.Invoke(ctx, "/v1.AllocationService/ListAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationServiceClient) RequestSpace(ctx context.Context, in *RequestSpaceRequest, opts ...grpc.CallOption) (*RequestSpaceResponse, error) {
	out := new(RequestSpaceResponse)
	err := c.cc.Invoke(ctx, "/v1.AllocationService/RequestSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationServiceClient) ReleaseSpace(ctx context.Context, in *ReleaseSpaceRequest, opts ...grpc.CallOption) (*ReleaseSpaceResponse, error) {
	out := new(ReleaseSpaceResponse)
	err := c.cc.Invoke(ctx, "/v1.AllocationService/ReleaseSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllocationServiceServer is the server API for AllocationService service.
// All implementations must embed UnimplementedAllocationServiceServer
// for forward compatibility
type AllocationServiceServer interface {
	CreateAllocation(context.Context, *CreateAllocationRequest) (*CreateAllocationResponse, error)
	DeleteAllocation(context.Context, *DeleteAllocationRequest) (*DeleteAllocationResponse, error)
	UpdateAllocation(context.Context, *UpdateAllocationRequest) (*UpdateAllocationResponse, error)
	FindAllocation(context.Context, *FindAllocationRequest) (*FindAllocationResponse, error)
	GetAllocation(context.Context, *GetAllocationRequest) (*GetAllocationResponse, error)
	ListAllocation(context.Context, *ListAllocationRequest) (*ListAllocationResponse, error)
	RequestSpace(context.Context, *RequestSpaceRequest) (*RequestSpaceResponse, error)
	ReleaseSpace(context.Context, *ReleaseSpaceRequest) (*ReleaseSpaceResponse, error)
	mustEmbedUnimplementedAllocationServiceServer()
}

// UnimplementedAllocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAllocationServiceServer struct {
}

func (UnimplementedAllocationServiceServer) CreateAllocation(context.Context, *CreateAllocationRequest) (*CreateAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllocation not implemented")
}
func (UnimplementedAllocationServiceServer) DeleteAllocation(context.Context, *DeleteAllocationRequest) (*DeleteAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllocation not implemented")
}
func (UnimplementedAllocationServiceServer) UpdateAllocation(context.Context, *UpdateAllocationRequest) (*UpdateAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllocation not implemented")
}
func (UnimplementedAllocationServiceServer) FindAllocation(context.Context, *FindAllocationRequest) (*FindAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllocation not implemented")
}
func (UnimplementedAllocationServiceServer) GetAllocation(context.Context, *GetAllocationRequest) (*GetAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocation not implemented")
}
func (UnimplementedAllocationServiceServer) ListAllocation(context.Context, *ListAllocationRequest) (*ListAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllocation not implemented")
}
func (UnimplementedAllocationServiceServer) RequestSpace(context.Context, *RequestSpaceRequest) (*RequestSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSpace not implemented")
}
func (UnimplementedAllocationServiceServer) ReleaseSpace(context.Context, *ReleaseSpaceRequest) (*ReleaseSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSpace not implemented")
}
func (UnimplementedAllocationServiceServer) mustEmbedUnimplementedAllocationServiceServer() {}

// UnsafeAllocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllocationServiceServer will
// result in compilation errors.
type UnsafeAllocationServiceServer interface {
	mustEmbedUnimplementedAllocationServiceServer()
}

func RegisterAllocationServiceServer(s grpc.ServiceRegistrar, srv AllocationServiceServer) {
	s.RegisterService(&AllocationService_ServiceDesc, srv)
}

func _AllocationService_CreateAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).CreateAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AllocationService/CreateAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).CreateAllocation(ctx, req.(*CreateAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationService_DeleteAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).DeleteAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AllocationService/DeleteAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).DeleteAllocation(ctx, req.(*DeleteAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationService_UpdateAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).UpdateAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AllocationService/UpdateAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).UpdateAllocation(ctx, req.(*UpdateAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationService_FindAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).FindAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AllocationService/FindAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).FindAllocation(ctx, req.(*FindAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationService_GetAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).GetAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AllocationService/GetAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).GetAllocation(ctx, req.(*GetAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationService_ListAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).ListAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AllocationService/ListAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).ListAllocation(ctx, req.(*ListAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationService_RequestSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).RequestSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AllocationService/RequestSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).RequestSpace(ctx, req.(*RequestSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationService_ReleaseSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).ReleaseSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AllocationService/ReleaseSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).ReleaseSpace(ctx, req.(*ReleaseSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AllocationService_ServiceDesc is the grpc.ServiceDesc for AllocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AllocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AllocationService",
	HandlerType: (*AllocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAllocation",
			Handler:    _AllocationService_CreateAllocation_Handler,
		},
		{
			MethodName: "DeleteAllocation",
			Handler:    _AllocationService_DeleteAllocation_Handler,
		},
		{
			MethodName: "UpdateAllocation",
			Handler:    _AllocationService_UpdateAllocation_Handler,
		},
		{
			MethodName: "FindAllocation",
			Handler:    _AllocationService_FindAllocation_Handler,
		},
		{
			MethodName: "GetAllocation",
			Handler:    _AllocationService_GetAllocation_Handler,
		},
		{
			MethodName: "ListAllocation",
			Handler:    _AllocationService_ListAllocation_Handler,
		},
		{
			MethodName: "RequestSpace",
			Handler:    _AllocationService_RequestSpace_Handler,
		},
		{
			MethodName: "ReleaseSpace",
			Handler:    _AllocationService_ReleaseSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/allocation/v1/allocation.proto",
}
