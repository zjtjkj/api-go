// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: api/plan/v1/plan.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanServiceClient is the client API for PlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanServiceClient interface {
	AddPlan(ctx context.Context, in *AddPlanRequest, opts ...grpc.CallOption) (*AddPlanResponse, error)
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanResponse, error)
	ListPlan(ctx context.Context, in *ListPlanRequest, opts ...grpc.CallOption) (*ListPlanResponse, error)
	FindPlan(ctx context.Context, in *FindPlanRequest, opts ...grpc.CallOption) (*FindPlanResponse, error)
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanResponse, error)
	GetInitData(ctx context.Context, in *GetInitDataRequest, opts ...grpc.CallOption) (*GetInitDataResponse, error)
	FindPlanByCompany(ctx context.Context, in *FindPlanByCompanyRequest, opts ...grpc.CallOption) (*FindPlanByCompanyResponse, error)
	LockPlan(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error)
	UnlockPlan(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error)
	AddPlanConfirm(ctx context.Context, in *AddPlanRequest, opts ...grpc.CallOption) (*AddPlanResponse, error)
	AddPlanCancel(ctx context.Context, in *AddPlanRequest, opts ...grpc.CallOption) (*AddPlanResponse, error)
	DeletePlanConfirm(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error)
	DeletePlanCancel(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error)
	LockPlanConfirm(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error)
	LockPlanCancel(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error)
	UnlockPlanConfirm(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error)
	UnlockPlanCancel(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error)
}

type planServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanServiceClient(cc grpc.ClientConnInterface) PlanServiceClient {
	return &planServiceClient{cc}
}

func (c *planServiceClient) AddPlan(ctx context.Context, in *AddPlanRequest, opts ...grpc.CallOption) (*AddPlanResponse, error) {
	out := new(AddPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/AddPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error) {
	out := new(DeletePlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/DeletePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanResponse, error) {
	out := new(UpdatePlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/UpdatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) ListPlan(ctx context.Context, in *ListPlanRequest, opts ...grpc.CallOption) (*ListPlanResponse, error) {
	out := new(ListPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/ListPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) FindPlan(ctx context.Context, in *FindPlanRequest, opts ...grpc.CallOption) (*FindPlanResponse, error) {
	out := new(FindPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/FindPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanResponse, error) {
	out := new(GetPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/GetPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GetInitData(ctx context.Context, in *GetInitDataRequest, opts ...grpc.CallOption) (*GetInitDataResponse, error) {
	out := new(GetInitDataResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/GetInitData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) FindPlanByCompany(ctx context.Context, in *FindPlanByCompanyRequest, opts ...grpc.CallOption) (*FindPlanByCompanyResponse, error) {
	out := new(FindPlanByCompanyResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/FindPlanByCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) LockPlan(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error) {
	out := new(LockAndUnlockPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/LockPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UnlockPlan(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error) {
	out := new(LockAndUnlockPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/UnlockPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) AddPlanConfirm(ctx context.Context, in *AddPlanRequest, opts ...grpc.CallOption) (*AddPlanResponse, error) {
	out := new(AddPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/AddPlanConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) AddPlanCancel(ctx context.Context, in *AddPlanRequest, opts ...grpc.CallOption) (*AddPlanResponse, error) {
	out := new(AddPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/AddPlanCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) DeletePlanConfirm(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error) {
	out := new(DeletePlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/DeletePlanConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) DeletePlanCancel(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error) {
	out := new(DeletePlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/DeletePlanCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) LockPlanConfirm(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error) {
	out := new(LockAndUnlockPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/LockPlanConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) LockPlanCancel(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error) {
	out := new(LockAndUnlockPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/LockPlanCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UnlockPlanConfirm(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error) {
	out := new(LockAndUnlockPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/UnlockPlanConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UnlockPlanCancel(ctx context.Context, in *LockAndUnlockPlanRequest, opts ...grpc.CallOption) (*LockAndUnlockPlanResponse, error) {
	out := new(LockAndUnlockPlanResponse)
	err := c.cc.Invoke(ctx, "/plan.PlanService/UnlockPlanCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanServiceServer is the server API for PlanService service.
// All implementations must embed UnimplementedPlanServiceServer
// for forward compatibility
type PlanServiceServer interface {
	AddPlan(context.Context, *AddPlanRequest) (*AddPlanResponse, error)
	DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error)
	UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error)
	ListPlan(context.Context, *ListPlanRequest) (*ListPlanResponse, error)
	FindPlan(context.Context, *FindPlanRequest) (*FindPlanResponse, error)
	GetPlan(context.Context, *GetPlanRequest) (*GetPlanResponse, error)
	GetInitData(context.Context, *GetInitDataRequest) (*GetInitDataResponse, error)
	FindPlanByCompany(context.Context, *FindPlanByCompanyRequest) (*FindPlanByCompanyResponse, error)
	LockPlan(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error)
	UnlockPlan(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error)
	AddPlanConfirm(context.Context, *AddPlanRequest) (*AddPlanResponse, error)
	AddPlanCancel(context.Context, *AddPlanRequest) (*AddPlanResponse, error)
	DeletePlanConfirm(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error)
	DeletePlanCancel(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error)
	LockPlanConfirm(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error)
	LockPlanCancel(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error)
	UnlockPlanConfirm(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error)
	UnlockPlanCancel(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error)
	mustEmbedUnimplementedPlanServiceServer()
}

// UnimplementedPlanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlanServiceServer struct {
}

func (UnimplementedPlanServiceServer) AddPlan(context.Context, *AddPlanRequest) (*AddPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlan not implemented")
}
func (UnimplementedPlanServiceServer) DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlan not implemented")
}
func (UnimplementedPlanServiceServer) UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlan not implemented")
}
func (UnimplementedPlanServiceServer) ListPlan(context.Context, *ListPlanRequest) (*ListPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlan not implemented")
}
func (UnimplementedPlanServiceServer) FindPlan(context.Context, *FindPlanRequest) (*FindPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPlan not implemented")
}
func (UnimplementedPlanServiceServer) GetPlan(context.Context, *GetPlanRequest) (*GetPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedPlanServiceServer) GetInitData(context.Context, *GetInitDataRequest) (*GetInitDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitData not implemented")
}
func (UnimplementedPlanServiceServer) FindPlanByCompany(context.Context, *FindPlanByCompanyRequest) (*FindPlanByCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPlanByCompany not implemented")
}
func (UnimplementedPlanServiceServer) LockPlan(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockPlan not implemented")
}
func (UnimplementedPlanServiceServer) UnlockPlan(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockPlan not implemented")
}
func (UnimplementedPlanServiceServer) AddPlanConfirm(context.Context, *AddPlanRequest) (*AddPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlanConfirm not implemented")
}
func (UnimplementedPlanServiceServer) AddPlanCancel(context.Context, *AddPlanRequest) (*AddPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlanCancel not implemented")
}
func (UnimplementedPlanServiceServer) DeletePlanConfirm(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlanConfirm not implemented")
}
func (UnimplementedPlanServiceServer) DeletePlanCancel(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlanCancel not implemented")
}
func (UnimplementedPlanServiceServer) LockPlanConfirm(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockPlanConfirm not implemented")
}
func (UnimplementedPlanServiceServer) LockPlanCancel(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockPlanCancel not implemented")
}
func (UnimplementedPlanServiceServer) UnlockPlanConfirm(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockPlanConfirm not implemented")
}
func (UnimplementedPlanServiceServer) UnlockPlanCancel(context.Context, *LockAndUnlockPlanRequest) (*LockAndUnlockPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockPlanCancel not implemented")
}
func (UnimplementedPlanServiceServer) mustEmbedUnimplementedPlanServiceServer() {}

// UnsafePlanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanServiceServer will
// result in compilation errors.
type UnsafePlanServiceServer interface {
	mustEmbedUnimplementedPlanServiceServer()
}

func RegisterPlanServiceServer(s grpc.ServiceRegistrar, srv PlanServiceServer) {
	s.RegisterService(&PlanService_ServiceDesc, srv)
}

func _PlanService_AddPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).AddPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/AddPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).AddPlan(ctx, req.(*AddPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_DeletePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).DeletePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/DeletePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).DeletePlan(ctx, req.(*DeletePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/UpdatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_ListPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).ListPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/ListPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).ListPlan(ctx, req.(*ListPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_FindPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).FindPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/FindPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).FindPlan(ctx, req.(*FindPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/GetPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).GetPlan(ctx, req.(*GetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_GetInitData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInitDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).GetInitData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/GetInitData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).GetInitData(ctx, req.(*GetInitDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_FindPlanByCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPlanByCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).FindPlanByCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/FindPlanByCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).FindPlanByCompany(ctx, req.(*FindPlanByCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_LockPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAndUnlockPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).LockPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/LockPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).LockPlan(ctx, req.(*LockAndUnlockPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_UnlockPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAndUnlockPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).UnlockPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/UnlockPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).UnlockPlan(ctx, req.(*LockAndUnlockPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_AddPlanConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).AddPlanConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/AddPlanConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).AddPlanConfirm(ctx, req.(*AddPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_AddPlanCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).AddPlanCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/AddPlanCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).AddPlanCancel(ctx, req.(*AddPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_DeletePlanConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).DeletePlanConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/DeletePlanConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).DeletePlanConfirm(ctx, req.(*DeletePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_DeletePlanCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).DeletePlanCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/DeletePlanCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).DeletePlanCancel(ctx, req.(*DeletePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_LockPlanConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAndUnlockPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).LockPlanConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/LockPlanConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).LockPlanConfirm(ctx, req.(*LockAndUnlockPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_LockPlanCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAndUnlockPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).LockPlanCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/LockPlanCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).LockPlanCancel(ctx, req.(*LockAndUnlockPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_UnlockPlanConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAndUnlockPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).UnlockPlanConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/UnlockPlanConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).UnlockPlanConfirm(ctx, req.(*LockAndUnlockPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_UnlockPlanCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAndUnlockPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).UnlockPlanCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plan.PlanService/UnlockPlanCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).UnlockPlanCancel(ctx, req.(*LockAndUnlockPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanService_ServiceDesc is the grpc.ServiceDesc for PlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plan.PlanService",
	HandlerType: (*PlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlan",
			Handler:    _PlanService_AddPlan_Handler,
		},
		{
			MethodName: "DeletePlan",
			Handler:    _PlanService_DeletePlan_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _PlanService_UpdatePlan_Handler,
		},
		{
			MethodName: "ListPlan",
			Handler:    _PlanService_ListPlan_Handler,
		},
		{
			MethodName: "FindPlan",
			Handler:    _PlanService_FindPlan_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _PlanService_GetPlan_Handler,
		},
		{
			MethodName: "GetInitData",
			Handler:    _PlanService_GetInitData_Handler,
		},
		{
			MethodName: "FindPlanByCompany",
			Handler:    _PlanService_FindPlanByCompany_Handler,
		},
		{
			MethodName: "LockPlan",
			Handler:    _PlanService_LockPlan_Handler,
		},
		{
			MethodName: "UnlockPlan",
			Handler:    _PlanService_UnlockPlan_Handler,
		},
		{
			MethodName: "AddPlanConfirm",
			Handler:    _PlanService_AddPlanConfirm_Handler,
		},
		{
			MethodName: "AddPlanCancel",
			Handler:    _PlanService_AddPlanCancel_Handler,
		},
		{
			MethodName: "DeletePlanConfirm",
			Handler:    _PlanService_DeletePlanConfirm_Handler,
		},
		{
			MethodName: "DeletePlanCancel",
			Handler:    _PlanService_DeletePlanCancel_Handler,
		},
		{
			MethodName: "LockPlanConfirm",
			Handler:    _PlanService_LockPlanConfirm_Handler,
		},
		{
			MethodName: "LockPlanCancel",
			Handler:    _PlanService_LockPlanCancel_Handler,
		},
		{
			MethodName: "UnlockPlanConfirm",
			Handler:    _PlanService_UnlockPlanConfirm_Handler,
		},
		{
			MethodName: "UnlockPlanCancel",
			Handler:    _PlanService_UnlockPlanCancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/plan/v1/plan.proto",
}
