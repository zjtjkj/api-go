// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/upload/v1/upload.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on File with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FileMultiError, or nil if none found.
func (m *File) ValidateAll() error {
	return m.validate(true)
}

func (m *File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUploadedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUploadedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileValidationError{
				field:  "UploadedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Hash

	// no validation rules for Path

	// no validation rules for BlockSum

	// no validation rules for BlockSize

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for Status

	if len(errors) > 0 {
		return FileMultiError(errors)
	}

	return nil
}

// FileMultiError is an error wrapping multiple validation errors returned by
// File.ValidateAll() if the designated constraints aren't met.
type FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMultiError) AllErrors() []error { return m }

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on CreateFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFileRequestMultiError, or nil if none found.
func (m *CreateFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateFileRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Size

	if len(errors) > 0 {
		return CreateFileRequestMultiError(errors)
	}

	return nil
}

// CreateFileRequestMultiError is an error wrapping multiple validation errors
// returned by CreateFileRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFileRequestMultiError) AllErrors() []error { return m }

// CreateFileRequestValidationError is the validation error returned by
// CreateFileRequest.Validate if the designated constraints aren't met.
type CreateFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFileRequestValidationError) ErrorName() string {
	return "CreateFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFileRequestValidationError{}

// Validate checks the field values on CreateFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFileReplyMultiError, or nil if none found.
func (m *CreateFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BlockSize

	if len(errors) > 0 {
		return CreateFileReplyMultiError(errors)
	}

	return nil
}

// CreateFileReplyMultiError is an error wrapping multiple validation errors
// returned by CreateFileReply.ValidateAll() if the designated constraints
// aren't met.
type CreateFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFileReplyMultiError) AllErrors() []error { return m }

// CreateFileReplyValidationError is the validation error returned by
// CreateFileReply.Validate if the designated constraints aren't met.
type CreateFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFileReplyValidationError) ErrorName() string { return "CreateFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFileReplyValidationError{}

// Validate checks the field values on GetFileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileRequestMultiError,
// or nil if none found.
func (m *GetFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 36 {
		err := GetFileRequestValidationError{
			field:  "Id",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return GetFileRequestMultiError(errors)
	}

	return nil
}

// GetFileRequestMultiError is an error wrapping multiple validation errors
// returned by GetFileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileRequestMultiError) AllErrors() []error { return m }

// GetFileRequestValidationError is the validation error returned by
// GetFileRequest.Validate if the designated constraints aren't met.
type GetFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRequestValidationError) ErrorName() string { return "GetFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRequestValidationError{}

// Validate checks the field values on GetFileReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileReplyMultiError, or
// nil if none found.
func (m *GetFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileReplyValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileReplyValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileReplyValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileReplyMultiError(errors)
	}

	return nil
}

// GetFileReplyMultiError is an error wrapping multiple validation errors
// returned by GetFileReply.ValidateAll() if the designated constraints aren't met.
type GetFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileReplyMultiError) AllErrors() []error { return m }

// GetFileReplyValidationError is the validation error returned by
// GetFileReply.Validate if the designated constraints aren't met.
type GetFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileReplyValidationError) ErrorName() string { return "GetFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileReplyValidationError{}

// Validate checks the field values on CheckBlockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckBlockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckBlockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckBlockRequestMultiError, or nil if none found.
func (m *CheckBlockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckBlockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 36 {
		err := CheckBlockRequestValidationError{
			field:  "Id",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for Index

	if utf8.RuneCountInString(m.GetHash()) != 16 {
		err := CheckBlockRequestValidationError{
			field:  "Hash",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return CheckBlockRequestMultiError(errors)
	}

	return nil
}

// CheckBlockRequestMultiError is an error wrapping multiple validation errors
// returned by CheckBlockRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckBlockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckBlockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckBlockRequestMultiError) AllErrors() []error { return m }

// CheckBlockRequestValidationError is the validation error returned by
// CheckBlockRequest.Validate if the designated constraints aren't met.
type CheckBlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckBlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckBlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckBlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckBlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckBlockRequestValidationError) ErrorName() string {
	return "CheckBlockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckBlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckBlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckBlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckBlockRequestValidationError{}

// Validate checks the field values on CheckBlockReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckBlockReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckBlockReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckBlockReplyMultiError, or nil if none found.
func (m *CheckBlockReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckBlockReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckBlockReplyMultiError(errors)
	}

	return nil
}

// CheckBlockReplyMultiError is an error wrapping multiple validation errors
// returned by CheckBlockReply.ValidateAll() if the designated constraints
// aren't met.
type CheckBlockReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckBlockReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckBlockReplyMultiError) AllErrors() []error { return m }

// CheckBlockReplyValidationError is the validation error returned by
// CheckBlockReply.Validate if the designated constraints aren't met.
type CheckBlockReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckBlockReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckBlockReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckBlockReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckBlockReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckBlockReplyValidationError) ErrorName() string { return "CheckBlockReplyValidationError" }

// Error satisfies the builtin error interface
func (e CheckBlockReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckBlockReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckBlockReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckBlockReplyValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileRequestMultiError, or nil if none found.
func (m *DeleteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 36 {
		err := DeleteFileRequestValidationError{
			field:  "Id",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return DeleteFileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileRequestMultiError) AllErrors() []error { return m }

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on DeleteFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileReplyMultiError, or nil if none found.
func (m *DeleteFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFileReplyMultiError(errors)
	}

	return nil
}

// DeleteFileReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteFileReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileReplyMultiError) AllErrors() []error { return m }

// DeleteFileReplyValidationError is the validation error returned by
// DeleteFileReply.Validate if the designated constraints aren't met.
type DeleteFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileReplyValidationError) ErrorName() string { return "DeleteFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileReplyValidationError{}

// Validate checks the field values on MergeFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MergeFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MergeFileRequestMultiError, or nil if none found.
func (m *MergeFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetHash()) != 16 {
		err := MergeFileRequestValidationError{
			field:  "Hash",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return MergeFileRequestMultiError(errors)
	}

	return nil
}

// MergeFileRequestMultiError is an error wrapping multiple validation errors
// returned by MergeFileRequest.ValidateAll() if the designated constraints
// aren't met.
type MergeFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeFileRequestMultiError) AllErrors() []error { return m }

// MergeFileRequestValidationError is the validation error returned by
// MergeFileRequest.Validate if the designated constraints aren't met.
type MergeFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeFileRequestValidationError) ErrorName() string { return "MergeFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e MergeFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeFileRequestValidationError{}

// Validate checks the field values on MergeFileReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MergeFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MergeFileReplyMultiError,
// or nil if none found.
func (m *MergeFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MergeFileReplyMultiError(errors)
	}

	return nil
}

// MergeFileReplyMultiError is an error wrapping multiple validation errors
// returned by MergeFileReply.ValidateAll() if the designated constraints
// aren't met.
type MergeFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeFileReplyMultiError) AllErrors() []error { return m }

// MergeFileReplyValidationError is the validation error returned by
// MergeFileReply.Validate if the designated constraints aren't met.
type MergeFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeFileReplyValidationError) ErrorName() string { return "MergeFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e MergeFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeFileReplyValidationError{}
