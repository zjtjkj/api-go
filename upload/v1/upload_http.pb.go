// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UploadHTTPServer interface {
	CheckBlock(context.Context, *CheckBlockRequest) (*CheckBlockReply, error)
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileReply, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileReply, error)
	GetFile(context.Context, *GetFileRequest) (*GetFileReply, error)
	MergeFile(context.Context, *MergeFileRequest) (*MergeFileReply, error)
}

func RegisterUploadHTTPServer(s *http.Server, srv UploadHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/upload/file", _Upload_CreateFile0_HTTP_Handler(srv))
	r.GET("/api/v1/upload/file/{id}", _Upload_GetFile0_HTTP_Handler(srv))
	r.POST("/api/v1/upload/check", _Upload_CheckBlock0_HTTP_Handler(srv))
	r.DELETE("/api/v1/upload/file/{id}", _Upload_DeleteFile0_HTTP_Handler(srv))
	r.POST("/api/v1/upload/merge", _Upload_MergeFile0_HTTP_Handler(srv))
}

func _Upload_CreateFile0_HTTP_Handler(srv UploadHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateFileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.upload.v1.Upload/CreateFile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateFile(ctx, req.(*CreateFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateFileReply)
		return ctx.Result(200, reply)
	}
}

func _Upload_GetFile0_HTTP_Handler(srv UploadHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.upload.v1.Upload/GetFile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFile(ctx, req.(*GetFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFileReply)
		return ctx.Result(200, reply)
	}
}

func _Upload_CheckBlock0_HTTP_Handler(srv UploadHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckBlockRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.upload.v1.Upload/CheckBlock")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckBlock(ctx, req.(*CheckBlockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckBlockReply)
		return ctx.Result(200, reply)
	}
}

func _Upload_DeleteFile0_HTTP_Handler(srv UploadHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.upload.v1.Upload/DeleteFile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteFile(ctx, req.(*DeleteFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFileReply)
		return ctx.Result(200, reply)
	}
}

func _Upload_MergeFile0_HTTP_Handler(srv UploadHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MergeFileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.upload.v1.Upload/MergeFile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MergeFile(ctx, req.(*MergeFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MergeFileReply)
		return ctx.Result(200, reply)
	}
}

type UploadHTTPClient interface {
	CheckBlock(ctx context.Context, req *CheckBlockRequest, opts ...http.CallOption) (rsp *CheckBlockReply, err error)
	CreateFile(ctx context.Context, req *CreateFileRequest, opts ...http.CallOption) (rsp *CreateFileReply, err error)
	DeleteFile(ctx context.Context, req *DeleteFileRequest, opts ...http.CallOption) (rsp *DeleteFileReply, err error)
	GetFile(ctx context.Context, req *GetFileRequest, opts ...http.CallOption) (rsp *GetFileReply, err error)
	MergeFile(ctx context.Context, req *MergeFileRequest, opts ...http.CallOption) (rsp *MergeFileReply, err error)
}

type UploadHTTPClientImpl struct {
	cc *http.Client
}

func NewUploadHTTPClient(client *http.Client) UploadHTTPClient {
	return &UploadHTTPClientImpl{client}
}

func (c *UploadHTTPClientImpl) CheckBlock(ctx context.Context, in *CheckBlockRequest, opts ...http.CallOption) (*CheckBlockReply, error) {
	var out CheckBlockReply
	pattern := "/api/v1/upload/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.upload.v1.Upload/CheckBlock"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UploadHTTPClientImpl) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...http.CallOption) (*CreateFileReply, error) {
	var out CreateFileReply
	pattern := "/api/v1/upload/file"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.upload.v1.Upload/CreateFile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UploadHTTPClientImpl) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...http.CallOption) (*DeleteFileReply, error) {
	var out DeleteFileReply
	pattern := "/api/v1/upload/file/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.upload.v1.Upload/DeleteFile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UploadHTTPClientImpl) GetFile(ctx context.Context, in *GetFileRequest, opts ...http.CallOption) (*GetFileReply, error) {
	var out GetFileReply
	pattern := "/api/v1/upload/file/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.upload.v1.Upload/GetFile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UploadHTTPClientImpl) MergeFile(ctx context.Context, in *MergeFileRequest, opts ...http.CallOption) (*MergeFileReply, error) {
	var out MergeFileReply
	pattern := "/api/v1/upload/merge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.upload.v1.Upload/MergeFile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
